import abc
from abc import ABC, abstractmethod
from cat.auth.permissions import AuthPermission as AuthPermission, AuthResource as AuthResource, AuthUserInfo
from typing import Literal

class BaseAuthHandler(ABC, metaclass=abc.ABCMeta):
    """
    Base class to build custom Auth systems that will live alongside core auth.
    Methods `authorize_user_from_credential`
    MUST be implemented by subclasses.
    """
    async def authorize_user_from_credential(self, protocol: Literal['http', 'websocket'], credential: str, auth_resource: AuthResource, auth_permission: AuthPermission, user_id: str = 'user') -> AuthUserInfo | None: ...
    @abstractmethod
    async def authorize_user_from_jwt(self, token: str, auth_resource: AuthResource, auth_permission: AuthPermission) -> AuthUserInfo | None: ...
    @abstractmethod
    async def authorize_user_from_key(self, protocol: Literal['http', 'websocket'], user_id: str, api_key: str, auth_resource: AuthResource, auth_permission: AuthPermission) -> AuthUserInfo | None: ...

class CoreAuthHandler(BaseAuthHandler):
    async def authorize_user_from_jwt(self, token: str, auth_resource: AuthResource, auth_permission: AuthPermission) -> AuthUserInfo | None: ...
    async def authorize_user_from_key(self, protocol: Literal['http', 'websocket'], user_id: str, api_key: str, auth_resource: AuthResource, auth_permission: AuthPermission) -> AuthUserInfo | None: ...
    async def issue_jwt(self, username: str, password: str) -> str | None: ...

class CoreOnlyAuthHandler(BaseAuthHandler):
    async def authorize_user_from_jwt(*args, **kwargs) -> AuthUserInfo | None: ...
    async def authorize_user_from_key(*args, **kwargs) -> AuthUserInfo | None: ...
